/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.afd.mate.api;

import com.afd.mate.domain.model.GetStockPositionAndMarketValueApiResponseDTOAuto;
import com.afd.mate.domain.model.PostStockPositionAndMarketValueApiResponseDTOAuto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-21T14:57:06.350743Z[Etc/UTC]")
@Validated
@Tag(name = "auto-stock-position-market-value", description = "the auto-stock-position-market-value API")
public interface AutoStockPositionMarketValueApi {

    default AutoStockPositionMarketValueApiDelegate getDelegate() {
        return new AutoStockPositionMarketValueApiDelegate() {};
    }

    /**
     * POST /auto-stock-position-market-value : Add a new Symbol
     *
     * @param postStockPositionAndMarketValueApiResponseDTOAuto Returns PostStockPositionAndMarketValueApiResponse (required)
     * @return Symbol created (status code 201)
     */
    @Operation(
        operationId = "autoStockPositionMarketValuePost",
        summary = "Add a new Symbol",
        responses = {
            @ApiResponse(responseCode = "201", description = "Symbol created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auto-stock-position-market-value",
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> autoStockPositionMarketValuePost(
        @Parameter(name = "PostStockPositionAndMarketValueApiResponseDTOAuto", description = "Returns PostStockPositionAndMarketValueApiResponse", required = true, schema = @Schema(description = "")) @Valid @RequestBody Mono<PostStockPositionAndMarketValueApiResponseDTOAuto> postStockPositionAndMarketValueApiResponseDTOAuto,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().autoStockPositionMarketValuePost(postStockPositionAndMarketValueApiResponseDTOAuto, exchange);
    }


    /**
     * GET /auto-stock-position-market-value/{symbol} : Find stock position and market value by symbol
     * Returns a GetStockPositionAndMarketValueApiResponseDTO
     *
     * @param symbol name of the symbol (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "autoStockPositionMarketValueSymbolGet",
        summary = "Find stock position and market value by symbol",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  GetStockPositionAndMarketValueApiResponseDTOAuto.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auto-stock-position-market-value/{symbol}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<GetStockPositionAndMarketValueApiResponseDTOAuto>> autoStockPositionMarketValueSymbolGet(
        @Parameter(name = "symbol", description = "name of the symbol", required = true, schema = @Schema(description = "")) @PathVariable("symbol") String symbol,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().autoStockPositionMarketValueSymbolGet(symbol, exchange);
    }

}
